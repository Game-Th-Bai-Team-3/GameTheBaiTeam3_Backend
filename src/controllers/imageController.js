const cloudinaryService = require('../services/cloudinaryService');
const multer = require('multer');
const path = require('path');

// C·∫•u h√¨nh multer ƒë·ªÉ l∆∞u file trong memory
const storage = multer.memoryStorage();

const upload = multer({
  storage: storage,
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB limit
  },
  fileFilter: function (req, file, cb) {
    const allowedTypes = /jpeg|jpg|png|gif|webp/;
    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = allowedTypes.test(file.mimetype);
    
    if (mimetype && extname) {
      return cb(null, true);
    } else {
      cb(new Error('Ch·ªâ cho ph√©p file ·∫£nh (JPEG, JPG, PNG, GIF, WEBP)'));
    }
  }
});

const imageController = {
  // Middleware ƒë·ªÉ upload nhi·ªÅu ·∫£nh
  uploadMultiple: upload.fields([
    { name: 'image1', maxCount: 1 },
    { name: 'image2', maxCount: 1 }
  ]),

  // Upload 2 ·∫£nh l√™n Cloudinary v√† g·ª≠i qua socket ƒë·ªÉ AI x·ª≠ l√Ω
  processImages: async (req, res) => {
    try {
      // Ki·ªÉm tra c√≥ ƒë·ªß 2 ·∫£nh kh√¥ng
      if (!req.files || !req.files.image1 || !req.files.image2) {
        return res.status(400).json({
          success: false,
          message: 'C·∫ßn upload ƒë·ªß 2 ·∫£nh ƒë·ªÉ x·ª≠ l√Ω'
        });
      }

      const image1File = req.files.image1[0];
      const image2File = req.files.image2[0];

      // Upload ·∫£nh l√™n Cloudinary
      const [image1Url, image2Url] = await Promise.all([
        cloudinaryService.uploadFromBuffer(image1File.buffer, 'game-the-bai/input'),
        cloudinaryService.uploadFromBuffer(image2File.buffer, 'game-the-bai/input')
      ]);

      console.log('üé≠ Images uploaded to Cloudinary:', { image1Url, image2Url });

      // L·∫•y socket.io instance t·ª´ app
      const io = req.app.get('io');
      
      if (!io) {
        return res.status(500).json({
          success: false,
          message: 'Socket.IO ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o'
        });
      }

      // T·∫°o unique session ID cho request n√†y
      const sessionId = Date.now() + '-' + Math.random().toString(36).substr(2, 9);

      // Emit t·ªõi AI service qua socket
      io.emit('ai_process_request', {
        sessionId,
        image1Url,
        image2Url,
        timestamp: new Date().toISOString()
      });

      console.log('üöÄ Sent images to AI via socket:', sessionId);

      // Tr·∫£ v·ªÅ response ngay l·∫≠p t·ª©c v·ªõi th√¥ng tin upload th√†nh c√¥ng
      res.status(200).json({
        success: true,
        message: 'ƒê√£ upload ·∫£nh th√†nh c√¥ng v√† g·ª≠i ƒë·∫øn AI ƒë·ªÉ x·ª≠ l√Ω',
        data: {
          sessionId,
          image1Url,
          image2Url,
          status: 'processing'
        }
      });

    } catch (error) {
      console.error('‚ùå Error in processImages:', error);
      res.status(500).json({
        success: false,
        message: error.message || 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω ·∫£nh'
      });
    }
  },

  // Endpoint ƒë·ªÉ nh·∫≠n k·∫øt qu·∫£ t·ª´ AI v√† l∆∞u l√™n Cloudinary
  receiveAIResult: async (req, res) => {
    try {
      const { sessionId, resultImageUrl } = req.body;

      if (!sessionId || !resultImageUrl) {
        return res.status(400).json({
          success: false,
          message: 'Thi·∫øu sessionId ho·∫∑c resultImageUrl'
        });
      }

      // Upload ·∫£nh k·∫øt qu·∫£ l√™n Cloudinary t·ª´ URL AI tr·∫£ v·ªÅ
      const cloudinaryUrl = await cloudinaryService.uploadFromUrl(
        resultImageUrl, 
        'game-the-bai/output'
      );

      console.log('üéØ AI result uploaded to Cloudinary:', cloudinaryUrl);

      // L·∫•y socket.io instance
      const io = req.app.get('io');
      
      // G·ª≠i k·∫øt qu·∫£ cu·ªëi c√πng t·ªõi frontend
      io.emit('ai_process_complete', {
        sessionId,
        success: true,
        resultImageUrl: cloudinaryUrl,
        originalAIUrl: resultImageUrl,
        message: 'X·ª≠ l√Ω AI ho√†n th√†nh'
      });

      res.status(200).json({
        success: true,
        message: 'ƒê√£ l∆∞u k·∫øt qu·∫£ AI v√† g·ª≠i t·ªõi frontend',
        data: {
          sessionId,
          resultImageUrl: cloudinaryUrl
        }
      });

    } catch (error) {
      console.error('‚ùå Error in receiveAIResult:', error);
      
      // Th√¥ng b√°o l·ªói qua socket
      const io = req.app.get('io');
      if (io && req.body.sessionId) {
        io.emit('ai_process_error', {
          sessionId: req.body.sessionId,
          success: false,
          message: error.message || 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω k·∫øt qu·∫£ AI'
        });
      }

      res.status(500).json({
        success: false,
        message: error.message || 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω k·∫øt qu·∫£ AI'
      });
    }
  },

  // Ki·ªÉm tra tr·∫°ng th√°i x·ª≠ l√Ω theo sessionId
  checkStatus: async (req, res) => {
    try {
      const { sessionId } = req.params;
      
      // ·ªû ƒë√¢y b·∫°n c√≥ th·ªÉ implement logic l∆∞u tr·∫°ng th√°i trong database
      // Hi·ªán t·∫°i ch·ªâ tr·∫£ v·ªÅ th√¥ng tin c∆° b·∫£n
      res.status(200).json({
        success: true,
        data: {
          sessionId,
          status: 'processing',
          message: 'ƒêang x·ª≠ l√Ω b·ªüi AI...'
        }
      });
    } catch (error) {
      console.error('‚ùå Error in checkStatus:', error);
      res.status(500).json({
        success: false,
        message: error.message || 'C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra tr·∫°ng th√°i'
      });
    }
  }
};

module.exports = imageController; 