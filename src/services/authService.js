const User = require("../models/userModel.js");
const OTP = require("../models/otp.js");
const { generateToken } = require("../utils/jwtToken");
const { comparePassword, hashPassword } = require("../utils/bcrypt");
const { sendResetPasswordEmail } = require("./emailService");
const crypto = require("crypto");
const otpGenerator = require('otp-generator');
const  sendOtp  = require("../utils/sendOtp");


// ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi
exports.register = async ({ username, email, password, role }) => {
    // Ki·ªÉm tra n·∫øu email ƒë√£ t·ªìn t·∫°i
    const existingEmail = await User.findOne({ email });
    if (existingEmail) {
        throw new Error("Email ƒë√£ t·ªìn t·∫°i");
    }

    // T·∫°o OTP
    const otp = otpGenerator.generate(6, {
        upperCaseAlphabets: false,
        specialChars: false,
        lowerCaseAlphabets: false
    });

    // X√≥a OTP c≈© n·∫øu c√≥
    await OTP.deleteMany({ email });

    // Hash OTP v√† l∆∞u v√†o DB
    const hashedOtp = await hashPassword(otp);
    await OTP.create({
        email,
        otp: hashedOtp,
        expiresAt: Date.now() + 10 * 60 * 1000 // 10 ph√∫t
    });

    // Th·ª≠ g·ª≠i OTP qua email
    try {
        await sendOtp(email, otp);
    } catch (err) {
        // N·∫øu g·ª≠i th·∫•t b·∫°i th√¨ x√≥a OTP
        await OTP.deleteMany({ email });
        throw new Error("Kh√¥ng th·ªÉ g·ª≠i OTP. Vui l√≤ng th·ª≠ l·∫°i sau.");
    }

    // N·∫øu g·ª≠i OTP ok th√¨ m·ªõi t·∫°o user
    const user = await User.create({
        username,
        email,
        password,
        role,
        isVerified: false
    });

    return { message: "ƒêƒÉng k√Ω th√†nh c√¥ng, vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c OTP" };
};

// kiem tra otp
exports.verifyOtp = async ({email, otp}) => {
    const otpRecord = await OTP.findOne({ email});
    if (!otpRecord) {
        throw new Error("OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ d√πng");
    }
    if (otpRecord.expiresAt < Date.now()) {
        throw new Error("OTP ƒë√£ h·∫øt h·∫°n");
    }
    const isValid = await comparePassword(otp, otpRecord.otp);
    if (!isValid) {
        throw new Error("OTP kh√¥ng ƒë√∫ng");
    }
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i x√°c th·ª±c c·ªßa ng∆∞·ªùi d√πng
    await User.updateOne({ email }, {$set:{ isVerified: true }});

    //x√≥a OTP sau khi d√πng 
      await OTP.deleteOne({ _id: otpRecord._id });
      
      return { message: "X√°c th·ª±c th√†nh c√¥ng, b·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p" };
        
};

// ƒêƒÉng nh·∫≠p
exports.login = async ({email, password}) => {
    //kiem tra email
    const user = await User.findOne({ email });
    if (!user) {
        throw new Error("Email kh√¥ng t·ªìn t·∫°i");
    }
    //kiem tra verify
    if (!user.isVerified) {
        throw new Error("T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c OTP.");
    }

    const isMatch = await comparePassword(password, user.password);
    if (!isMatch) {
        throw new Error("M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng");
    }
    const token = generateToken(user._id, user.role);
    return { message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", token, user: { id: user._id, username: user.username, email: user.email, role: user.role } };
};

// C·∫≠p nh·∫≠t m·∫≠t kh·∫©u b·∫±ng m·∫≠t kh·∫©u hi·ªán t·∫°i
exports.changePassword = async ({ email, currentPassword, newPassword }) => {
    const user = await User.findOne({ email });
    if (!user) {
        throw new Error("Email kh√¥ng t·ªìn t·∫°i");
    }

    const isMatch = await comparePassword(currentPassword, user.password);
    if (!isMatch) {
        throw new Error("M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng");
    }

    // M·∫≠t kh·∫©u m·ªõi s·∫Ω ƒë∆∞·ª£c hash t·ª± ƒë·ªông b·ªüi middleware
    user.password = newPassword;
    await user.save();

    return { message: "Thay ƒë·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng" };
};
// Qu√™n m·∫≠t kh·∫©u - g·ª≠i email reset password
exports.forgotPassword = async ({ email }) => {
    console.log('üîç [DEBUG] Checking email:', email);
    const user = await User.findOne({ email });
    console.log('üîç [DEBUG] User found:', user ? 'YES' : 'NO');
    if (!user) {
        throw new Error("Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng");
    }

    // T·∫°o reset token
    const resetToken = crypto.randomBytes(32).toString('hex');
    const resetTokenExpiry = new Date(Date.now() + 10 * 60 * 1000); // 10 ph√∫t

    // L∆∞u token v√†o database
    user.resetToken = resetToken;
    user.resetTokenExpiry = resetTokenExpiry;
    await user.save();

    // G·ª≠i email reset password
    try {
        console.log('üìß [DEBUG] Sending email to:', email, 'with token:', resetToken);
        const emailResult = await sendResetPasswordEmail(email, user.username, resetToken);
        console.log('‚úÖ [DEBUG] Email sent successfully:', emailResult);
        
        return { 
            message: "Email reset m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ c·ªßa b·∫°n.",
            email: email,
            expiry: resetTokenExpiry
        };
    } catch (emailError) {
        // N·∫øu g·ª≠i email th·∫•t b·∫°i, x√≥a token ƒë√£ t·∫°o
        user.resetToken = undefined;
        user.resetTokenExpiry = undefined;
        await user.save();
        
        throw new Error("Kh√¥ng th·ªÉ g·ª≠i email reset m·∫≠t kh·∫©u. Vui l√≤ng th·ª≠ l·∫°i sau.");
    }
};

// Reset m·∫≠t kh·∫©u
exports.resetPassword = async ({ token, newPassword }) => {
    const user = await User.findOne({
        resetToken: token,
        resetTokenExpiry: { $gt: new Date() } // Token ch∆∞a h·∫øt h·∫°n
    });

    if (!user) {
        throw new Error("Reset token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");
    }

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
    user.password = newPassword; // S·∫Ω ƒë∆∞·ª£c hash t·ª± ƒë·ªông b·ªüi pre-save middleware
    user.resetToken = undefined;
    user.resetTokenExpiry = undefined;
    await user.save();

    return { message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng" };
};